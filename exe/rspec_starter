#!/usr/bin/env ruby

# An executable installed by the rspec_starter gem.  It's currently used to install a bin/start_rspec script.
#
# EXECUTION
#
# rspec_starter      # Currently a no-op.
# rspec_starter -i   # Install the bin/start_rspec script.
# rspec_starter -h   # View the help file to see more options.

lib = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require "cri"
require 'fileutils'
require 'rspec_starter/helpers'

module Cri
  # A small monkey patch to force the cri gem to stop coloring output.
  module Platform
    def self.color?(_io)
      false
    end
  end
end

# rubocop:disable Metrics/BlockLength
command = Cri::Command.define do
  usage       'rspec_starter [options]'
  # aliases     :ds, :stuff
  # summary     'foo'
  description "An executable installed by the rspec_starter gem.  It's currently used to install a bin/start_rspec script."

  flag :h, :help, 'show help for this command' do |_value, cmd|
    puts cmd.help
    exit 0
  end

  flag :i, :init, "(re)initialize your project bin/start_rspec file" do |_value, _cmd|
    helpers = RspecStarter::Helpers.new

    if File.file?("bin/start_rspec")
      FileUtils.mv("bin/start_rspec", "bin/start_rspec.bak")
      puts "bin/start_rspec renamed to bin/start_rspec.bak"
    end

    template_path =
      if helpers.project_is_rails_app?
        File.expand_path('../lib/templates/rails_start_rspec', __dir__)
      elsif helpers.project_is_rails_engine?
        File.expand_path('../lib/templates/rails_engine_start_rspec', __dir__)
      else
        File.expand_path('../lib/templates/start_rspec', __dir__)
      end

    FileUtils.cp(template_path, "bin/start_rspec")
    File.chmod(0o775, "bin/start_rspec")
    puts "bin/start_rspec created"
    exit 0
  end

  flag :v, :version, 'return the version of rspec_starter' do |_value, _cmd|
    require 'rspec_starter/version'
    puts RspecStarter::VERSION
    exit 0
  end

  run do |opts, args, cmd|
    # Customize here
  end
end
# rubocop:enable Metrics/BlockLength

command.run(ARGV)
exit 0
